<?php

namespace Zaimea\OAuth2Client\Contracts;

use League\OAuth2\Client\Token\AccessToken;

interface ProviderInterface
{
    /**
     * Build authorization redirect information.
     *
     * Return array with keys:
     *   - url: string (authorization url)
     *   - code_verifier: ?string (if PKCE used)
     *   - state: ?string (state generated by provider)
     *
     * @param array $options
     * @return array
     */
    public function redirectUrl(array $options = []): array;

    /**
     * Exchange authorization code for token (normalized).
     *
     * Return: ['access_token'=>..., 'refresh_token'=>..., 'expires_in'=>..., 'raw'=>[...] ]
     *
     * @param string $code
     * @param array $options
     * @return array
     */
    public function getAccessToken(string $code, array $options = []): array;

    /**
     * Refresh token.
     *
     * @param string $refreshToken
     * @param array $options
     * @return array
     */
    public function refreshAccessToken(string $refreshToken, array $options = []): array;

    /**
     * Get normalized user data from an access token (string or AccessToken).
     *
     * @param AccessToken|string $accessToken
     * @return array
     */
    public function userFromToken(AccessToken|string $accessToken): array;

    /**
     * Revoke given token when provider supports it.
     *
     * @param string|null $accessToken
     * @return bool
     */
    public function revokeToken(?string $accessToken = null): bool;

    /**
     * Return provider config as array.
     *
     * @return array
     */
    public function getConfig(): array;

    /**
     * Return scopes configured (nullable).
     *
     * @return array|null
     */
    public function getScopes(): ?array;
}
